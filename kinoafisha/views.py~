#-*- coding: utf-8 -*- 
from django.http import HttpResponse
from django.shortcuts import render_to_response, redirect
from django.http import Http404, HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.template import RequestContext
from django.views.decorators.cache import never_cache
from bs4 import BeautifulSoup
from base.models_dic import *
from base.models import *
from kinoafisha.func import *
from kinoafisha.forms import *
from kinoinfo.views import save_schedule, create_hallname, create_hall
from kinoinfo.func import low, capit, del_screen_type, del_separator, logger
import time
import urllib
import json


# из новой БД
def get_name_film_obj(film):
    f = del_screen_type(film)
    f = low(del_separator(f))
    try: name = NameProduct.objects.filter(name=f)[0]
    except IndexError:
        try: name = NameProduct.objects.filter(name=film)[0]
        except IndexError:
            try: name = NameProduct.objects.filter(name=low(film))[0]
            except IndexError:
                try: name = NameProduct.objects.filter(name=capit(film))[0]
                except IndexError: name = None
    return name


'''
# из старой БД
def get_name_film_obj(film):
    f = del_screen_type(film)
    f = low(del_separator(f))
    try: name = FilmsName.objects.using('afisha').filter(slug=f)[0]
    except IndexError:
        try: name = FilmsName.objects.using('afisha').filter(name=film)[0]
        except IndexError:
            try: name = FilmsName.objects.using('afisha').filter(name=low(film))[0]
            except IndexError:
                try: name = FilmsName.objects.using('afisha').filter(name=capit(film))[0]
                except IndexError: name = None
    return name
'''

# из новой БД
def get_films_obj(name):
    try: film = Films.objects.filter(name__name=name)[0]
    except IndexError: film = None
    return film
    
'''
# из старой БД
def get_films_obj(name):
    try: film = FilmsName.objects.using('afisha').select_related('id_films').filter(name=name)[0]
    except IndexError: film = None
    return film.id_films
'''

# sms
def sms(url, page, source_name):
    fdate = get_ftd_date('%Y-%m-%d')
    page_data = BeautifulSoup(page.read(), from_encoding="utf-8")
    content = ''
    # если есть данные
    if page_data.findAll('data'):
        for tag in page_data.findAll('data'):
            data = tag['value']
            # беру сеансы для текущего числа
            if data == fdate:
                for f in tag.findAll('film'): 
                    film_name = f['title'].strip()
                    for s in f.findAll('seans'):
                        time = '%s %s:00' % (data, s['time'])
                        content += '%s\t%s\t%s\t%s\n' % (time, url.id_hall_id, film_name, url.url_hall_sources)
                        files = open(rel('sources/%s/%s' % (source_name, url.id_hall_id)), 'w')
                        files.write(str(content.encode('utf-8')))
                        files.close()
    else:
        pass
        #logger(**{'event': 3, 'code': 2, 'bad_obj': url.url_hall_sources, 'obj1': url.id})

'''
# yandex
def yandex(s, page, so):
    date = get_ftd_date('%Y-%m-%d')
    content = ''
    cinema = Cinema.objects.get(id=s.cinema_id)
    soup = BeautifulSoup(page.read(), from_encoding="utf-8")
    for table in soup.findAll('table', {'class' : 'b-schedule-table b-schedule-table_header_yes b-schedule-table_type_place'}):
        count1 = 0
        for tr in table.findAll('tr'):
            if count1 == 1:
                count2 = 0
                fflag = 0
                for td in tr.findAll('td'):
                    # фильм
                    if count2 == 0:
                        film_n = td.a.string.encode('utf-8').strip()
                        film_obj = get_name_film_obj(film_n)
                        if film_obj:
                            pass
                        else:
                            film_obj = get_alter_film(film_n)
                            if film_obj:
                                pass
                            else:
                                schedule_log(3, film_n, 0, 0, so.id, 'save')
                        if film_obj:
                            fi = get_about_film_obj(film_obj)
                            fflag = 1
                        count2 += 1
                    # время
                    else:
                        if fflag > 0:
                            for t in td.findAll('span'):
                                time = date + ' ' + str(t.string.encode('utf-8')) + ':00'
                                content += str(time) + '\t' + str(film_obj[0].name.encode('utf-8')) + '(id:'+ str(fi.id) +')\n'
                                # -- cinema.id исправить на hall.id
                                open(rel('sources/' + str(so.name) + '/' + str(cinema.id)), 'w').write(str(content))
                                count2 = 0
                count1 = 0
            count1 += 1
'''

def get_source_response(u):
    '''
    Проверка url на ошибки
    '''
    try: 
        page = urllib.urlopen(u.url_hall_sources)
        if page.getcode() == 404: logger(**{'event': 3, 'code': 1, 'bad_obj': u.url_hall_sources, 'obj1': u.id})
        elif page.getcode() == 200: return page
    except IOError: logger(**{'event': 3, 'code': 1, 'bad_obj': u.url_hall_sources, 'obj1': u.id})
    return None
        
@never_cache
def get_source_data(request, source_id):
    '''
    Получение данных из источников
    '''
    t1 = time.time()
    counter = open(rel('sources/counter_hallssources'), 'r').read()
    url = HallsSources.objects.filter(source__id=source_id, pk__gt=counter)
    source_name = ''
    for j in url:
        source_name = j.source.source
        try: os.makedirs(rel('sources/' + source_name))
        except OSError: pass
        break
    t = 30 # кол-во записей для sleep
    for i, u in enumerate(url):
        page = get_source_response(u)
        if page:
            if source_id == '3':
                sms(u, page, source_name)
            elif source_id == '4':
                yandex(u, page, source_name)
        # каждую 30 запись засыпаю на 2 сек.
        if i == t:
            time.sleep(2.0)
            t += t
        if float(time.time()-t1) >= 50.0:
            open(rel('sources/counter_hallssources'), 'w').write(str(u.id))
            return HttpResponse('Обновите страницу')
    open(rel('sources/counter_hallssources'), 'w').write('0')
    return HttpResponseRedirect(reverse("main_kai"))
    
      



def get_files_list():
    '''
    Список сгенерированных файлов с репертуарами
    '''
    files_list = []
    try: 
        path = rel('sources/SMS/')
        file_names = os.listdir(path)
        files_list = [name for name in file_names if '~' not in name]
    except OSError: pass
    return files_list
    
@never_cache    
def get_files_list_sms_schedule(request):
    '''
    Вывод списка файлов в шаблон
    '''
    files_list = get_files_list()
    files_count = len(files_list)
    return render_to_response('kai/test_files_list.html', {'files_list': files_list, 'files_count': files_count}, context_instance=RequestContext(request))
    
def delete_sms_files(request):
    if request.method == 'POST':
        path = rel('sources/SMS/')
        file_names = os.listdir(path)
        for name in file_names:
            if os.path.isfile('%s%s' % (path, name)): os.remove('%s%s' % (path, name))
    files_list = get_files_list()
    return HttpResponseRedirect(reverse("get_files_list_sms_schedule"))

@never_cache
def save_sms_schedule(request):
    '''
    Сохранение сеансов смс из файлов в БД
    '''
    t1 = time.time()
    path = rel('sources/SMS/')
    fdate = get_ftd_date('%Y-%m-%d %H-%M-%S')
    file_names = os.listdir(path)
    content = ''
    for name in file_names:
        flag = True
        if '~' not in name:
            file_schedule = open('%s%s' % (path, name),'r')
            try:
                for lines in file_schedule.read().split('\n'):
                    line = lines.split('\t')
                    times = line[0]
                    if times >= fdate:
                        hall = Hall.objects.get(pk=line[1])
                        film_name = line[2]
                        film_name_obj = get_name_film_obj(film_name)
                        if film_name_obj:
                            save_schedule(times, hall, film_name_obj, film_name)
                        else:
                            logger(**{'event': 3, 'code': 3, 'bad_obj': film_name, 'obj1': line[3], 'extra': line[1]})
                            content += '%s\t%s\t%s\t%s\n' % (line[0], line[1], line[2], line[3])
                            flag = False
            except IndexError: pass
            file_schedule.close()
        if flag: os.remove('%s%s' % (path, name))
        else:
            file_sch = open('%s%s' % (path, name),'w')
            file_sch.write(content)
            file_sch.close()
            content = ''
        if float(time.time()-t1) >= 50.0:
            return HttpResponse('Обновите страницу')
    return HttpResponseRedirect(reverse("main_kai"))
            

'''
def save_sms_schedule(request):
    path = rel('sources/SMS/')
    fdate = get_ftd_date('%Y-%m-%d %H-%M-%S')
    file_names = os.listdir(path)
    for name in file_names:
        if '~' not in name:
            file_schedule = open('%s%s' % (path, name),'r')
            try:
                for lines in file_schedule.read().split('\n'):
                    line = lines.split('\t')
                    time = line[0]
                    if time >= fdate:
                        hall = Hall.objects.get(pk=line[1])
                        film = Films.objects.get(pk=line[2])
                        film_name = line[3]
                        save_schedule(time, hall, film, film_name)         
            except IndexError: pass
            file_schedule.close()
    return HttpResponseRedirect(reverse("main_kai"))
'''


def save_sms_sources(request):
    '''
    Парсер файла sms.txt
    '''
    lang = Language.objects.get(pk=1)
    list_all = []
    sms_file = open(rel('sources/sms.txt'), 'r')
    for line in sms_file.read().split('\n'):
        listt = []
        for i, l in enumerate(line.split('\t')):
            if i == 1: listt.append(capit(low(l)))
            elif i == 2: listt.append(l.split(' ')[0])
            elif i == 4: listt.append(l)
        list_all.append(listt)
    sms_file.close()
    source = ImportSources.objects.get(source='SMS')
    for l in list_all:
        try:
            if l[1] != 'ЗАКРЫТ':
                slug_city = low(del_separator(l[1]))
                try: city = City.objects.get(name__name=slug_city)
                except City.DoesNotExist:
                    try: city = City.objects.get(name__name=l[1])
                    except City.DoesNotExist:
                        try: city = City.objects.get(name__name=capit(low(l[1])))
                        except City.DoesNotExist: city = None
                if city:
                    slug_cinema = low(del_separator(l[0]))
                    try: cinema = Cinema.objects.get(name__name=slug_cinema, city=city.id)
                    except Cinema.DoesNotExist:
                        try: cinema = Cinema.objects.get(name__name=l[0], city=city.id)
                        except Cinema.DoesNotExist: cinema = None
                    if cinema:
                        name1 = create_hallname(1, lang, 'без указания зала')
                        name2 = create_hallname(2, lang, 'безуказаниязала')
                        hall = create_hall((name1, name2), 0, 0, cinema)
                        try: HallsSources.objects.get(id_hall=hall, source=source, url_hall_sources=l[2])
                        except HallsSources.DoesNotExist: HallsSources(id_hall=hall, source=source, url_hall_sources=l[2]).save()
                    else:
                        logger(**{'event': 2, 'code': 2, 'bad_obj': l[0], 'obj1': l[1]})
                else:
                    logger(**{'event': 2, 'code': 1, 'bad_obj': capit(low(l[1]))})
        except IndexError: pass
    return HttpResponseRedirect(reverse("main_kai"))



############################## редактор

def get_model_data(model, var, obj):
    res_list = []
    clear_obj = low(del_screen_type(obj.encode('utf-8'))) 
    clear_obj = clear_obj.replace('(', ' ').replace(')', ' ').replace('.', ' ').replace(':', ' ')
    for o in clear_obj.split(' '):
        if len(o.decode('utf-8')) >= 3:
            #result = model.objects.filter(name__name__contains=o).distinct() # для новой
            
            # для старой----
            if var == 1:
                result = model.objects.filter(name__contains=o).distinct()
            else: result = model.objects.filter(name__name__contains=o).distinct()
            # --------------
            
            for i in result:
                res_list.append(i)
    return res_list
'''
def editor(request, event, code, id):
    def method_get():
        lang = Language.objects.all()
        result = None
        result = get_model_data(model[0], name) 
        return render_to_response('editor/editor.html', {'event': event, 'code': code, 'obj': name, 'result': result, 'id': id, 'lang': lang}, context_instance=RequestContext(request))
    def method_post():
        if 'log_del' in request.POST: 
            Logger.objects.get(pk=id).delete()
        else:
            obj = model[0].objects.get(pk=request.POST['set_rel_obj'])
            lang = Language.objects.get(pk=request.POST['set_rel_lang'])
            try: model[1].objects.get(status=0, language=lang, name=name)
            except model[1].DoesNotExist:           
                obj_name = model[1].objects.create(status=0, language=lang, name=name)
                obj.name.add(obj_name)
                Logger.objects.get(pk=id).delete()
        return HttpResponseRedirect(reverse("get_log", kwargs={'event': event}))

    if request.method == 'GET' or request.method == 'POST':
        name = request.GET['obj']
        if event == '1' and code == '4' or event == '3' and code == '3': model = (Films, NameProduct)
        elif event == '2' and code == '1': model = (City, NameCity)
        elif event == '2' and code == '2': model = (Cinema, NameCinema)
    if request.method == 'GET':
        return method_get()
    elif request.method == 'POST':
        return method_post() 
    return HttpResponse('ошибка')
'''
@never_cache
def editor(request, event, code, id):
    def method_get():
        lang = Language.objects.all()
        result = None
        result = get_model_data(model[0], model[2], name) 
        return render_to_response('editor/editor.html', {'event': event, 'code': code, 'obj': name, 'result': result, 'id': id, 'lang': lang}, context_instance=RequestContext(request))
    def method_post():
        content = ''
        if 'log_del' in request.POST: 
            Logger.objects.get(pk=id).delete()
        else:
            obj = model[0].objects.get(pk=request.POST['set_rel_obj'])
            lang = Language.objects.get(pk=request.POST['set_rel_lang'])
            if event == '1' and code == '4' or event == '3' and code == '3':
                file_sch = open(rel('sources/SMS/%s' % (extra)),'r')
                try:
                    for lines in file_sch.read().split('\n'):
                        line = lines.split('\t')
                        film_name = line[2].replace('+', ' ')
                        if film_name == name.encode('utf8'):
                            time = line[0]
                            hall = Hall.objects.get(pk=line[1])
                            try: obj_name = model[1].objects.get(status=0, language=lang, name=line[2])
                            except model[1].DoesNotExist: obj_name = model[1].objects.create(status=0, language=lang, name=line[2])
                            save_schedule(time, hall, obj_name, line[2])
                            try: Logger.objects.get(pk=id).delete()
                            except Logger.DoesNotExist: pass
                        else:
                            content += '%s\t%s\t%s\t%s\n' % (line[0], line[1], line[2], line[3])
                except IndexError: pass
                file_sch.close()
                if content != '':
                    file_sch = open(rel('sources/SMS/%s' % (extra)),'w')
                    file_sch.write(content)
                    file_sch.close()
                    content = ''
                else: os.remove(rel('sources/SMS/%s' % (extra)))
                
            else:
                try: model[1].objects.get(status=0, language=lang, name=name)
                except model[1].DoesNotExist:           
                    obj_name = model[1].objects.create(status=0, language=lang, name=name)
                    obj.name.add(obj_name)
                    Logger.objects.get(pk=id).delete()
        return HttpResponseRedirect(reverse("get_log", kwargs={'event': event}))
    
    if request.method == 'GET' or request.method == 'POST':
        name = request.GET['obj']
        if 'extra' in request.GET: extra = request.GET['extra']
        #if event == '1' and code == '4' or event == '3' and code == '3': model = (Films, NameProduct) # для новой
        if event == '1' and code == '4' or event == '3' and code == '3': model = (NameProduct, NameProduct, 1) # для старой
        elif event == '2' and code == '1': model = (City, NameCity, 0)
        elif event == '2' and code == '2': model = (Cinema, NameCinema, 0)
    if request.method == 'GET':
        return method_get()
    elif request.method == 'POST':
        return method_post() 
    return HttpResponse('ошибка')




